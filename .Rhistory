library(gapminder)
install.packages("gapminder")
library(gapminder)
gapminder
library(tidyr)
gapminder
gapminder >%>
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
library(ggplot2)
gapminder %>%
ggplot(aes(year, lifeExp, group = country)) +
geom_line(alpha = 1/3)
nz <- filter(gapminder, country == "New Zeland")
nz <- filter(gapminder, country == "New Zealand")
nz <- filter(gapminder, country == "New Zealand")
list.of.packages <- c("sqldf", "glmnet", "gfortran", "rgl", "CVST", "igraph", "recipes", "ggplot2", "caret", "forcats", "olsrr", "tidyr", "corrplot", "parallel", "doParallel")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.r-project.org")
list.of.packages <- c("sqldf", "glmnet", "gfortran", "rgl", "CVST", "igraph", "recipes", "ggplot2", "caret", "forcats", "olsrr", "tidyr", "corrplot", "parallel", "doParallel")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.r-project.org")
#Load the data
train <- read.csv("train.csv")
test <- read.csv("test.csv")
# Generate histogram of Sale Price
h1 <- hist(train$SalePrice, data = train, main = "Historgram of Sale Price", xlab = "Sale Price in US$")
# Perform natural logarithm on response variable.
train$SalePrice <- log(train$SalePrice)
#Inspect the data
dim(train)
str(train)
library(sqldf) # Used for manipulating the data frames using SQL
library(glmnet) # Used for...
library(caret) # Used for...
library(forcats) # Used for...
library(olsrr) # Used for creating the foward
library(MASS) # Used for backward, and stepwise models
library(tidyr) #Used for creating some of the plots
library(ggplot2) #Used for creating some of the plots
library(corrplot) #Used to create the correlation matrix
library(parallel) #Using to assign more cores and allow parallel processing
library(doParallel)#Using to assign more cores and allow parallel processing
#Going to assign more cores to R and leave one for OS. Not sure if it will help feature selection
#but worth a shot.
cluster <- makeCluster(detectCores()-1)
registerDoParallel(cluster)
fitControl <- trainControl(method = "cv",
number = 2,
allowParallel = TRUE)
#This shows us what is null
sapply(train, function(x) sum(is.na(x)))
#upon inspecton, the following variables have missing information:
#LotFrontage, Alley, MasVnrType, MasVnrArea, BsmtQual, BstCond, BsmtExposure, BsmtFinType1, BsmtFinType2,
#FireplaceQu, GarageType, GarageYrBlt, GarageFinish, GarageCond, Fence, MiscFeature, PoolQC
#Adding sale price to the test set for combining
test$SalePrice <- 0
#Join the train and test sets for preprocessing
data <- rbind(train, test)
#Converting values to NULL in the following variables tha will not be used
data$MiscFeature <- NULL # Missing value in 96.4% of observations
data$Alley <- NULL # Missing value in 93.2% of observations
data$PoolQC <- NULL # Missing value in 99.7% of observations
#Variables with values as NA
NAFeatures = names(which(colSums(is.na(data))>0))
#Get the median lot frontage and update where NA
median(train$LotFrontage, na.rm = TRUE)  # This ends up being 69.  Going to update the NA
data$LotFrontage[is.na(data$LotFrontage)] <-69
#If NA for GarageYrBlt, then set to YearBuilt of house
data$GarageYrBlt[is.na(data$GarageYrBlt)] <-  as.integer(data$YearBuilt)
#Create vectors of Variables with missing observations and variables with zero values
missingObs = c("MSZoning", "MasVnrType", "Utilities", "Exterior1st", "Exterior2nd", "SaleType")
effZero = c("LotFrontage", "MasVnrArea", "BsmtFinSF1", "BsmtFinSF2", "BsmtUnfSF", "TotalBsmtSF","GarageCars", "GarageArea", "BsmtFullBath", "BsmtHalfBath")
# Get Effectively Absent category by excluding other categories from varsWithNA
effAbsent = NAFeatures[!NAFeatures %in% missingObs]
effAbsent = effAbsent[!effAbsent %in% effZero]
effAbsent = effAbsent[!effAbsent %in% c("Functional")]
# Function for replacing NAs in nominal and ordinal variables
replaceNAfactor = function(data.col, factorString){
char.col <- as.character(data.col)
char.col[which(is.na(data.col))] <- factorString
as.factor(char.col)
}
# Replace NAs with None in Effectively Absent category
for (i in 1:ncol(data)){
if(names(data[i]) %in% effAbsent){
data[,i] <- replaceNAfactor(data[,i], "None")}
}
# Replace NAs with MissingObs in Missing Observations category
for (i in 1:ncol(data)){
if(names(data[i]) %in% missingObs){
data[,i] <- replaceNAfactor(data[,i], "MissingObs")}
}
# Replace NAs with 0 in Effectively Zero category
for (i in 1:ncol(data)){
if(names(data[i]) %in% effZero)
data[is.na(data[,i]),i] <- 0
}
data$Functional <- replaceNAfactor(data$Functional, "Typ")
#Checking that we corrected for NAs
sapply(data, function(x) sum(is.na(x)))
#Resplitting train and test
xtrain <- as.data.frame(sqldf("select * from data where SalePrice <> 0"))
ytrain <- sqldf("select SalePrice from data where SalePrice <> 0")
names(ytrain) <- c("SalePrice")
xtrain$SalePrice <- NULL
xtest <- sqldf("select * from data where SalePrice = 0")
xtest$SalePrice <- NULL
modelfit_all_fields <- lm(ytrain$SalePrice ~ ., data = xtrain[,-1])
summary(modelfit_all_fields)
hist(ytrain$SalePrice)
plot(modelfit_all_fields)
plot(modelfit_all_fields)
plot(modelfit_all_fields)
train_control <- trainControl(method="cv", number=10)
grid <- expand.grid(.fL=c(0), .usekernel=c(FALSE))
model <- train(ytrain$SalePrice~., data=xtrain[,-1], trControl=train_control, method="nb", tuneGrid=grid)
library(caret)
modelfit_al
modelfit_all_fields <- lm(ytrain$SalePrice ~ ., data = xtrain[,-1])
summary(modelfit_all_fields)
modelfit_all_fields2 <- train(ytrain$SalePrice ~ ., data = xtrain[,-1], method = "lm")
str(test)
train2 <- cbind(xtrain, ytrain)
str(train2)
modelfit_all_fields2 <- train(SalePrice ~ ., data = train2, method = "lm")
str(modelfit_all_fields2)
summary(modelfit_all_fields2)
modelfit_all_fields2 <- train(SalePrice ~ ., data = train2, method = "lm",
trControl = trainControl(method = "cv", number = 10, verboseIter = TRUE))
summary(modelfit_all_fields2)
summary(train_control)
modelfit_all_fields2
names(modelfit_all_fields2)
modelfit_all_fields2$results
modelfit_all_fields2$modelInfo
modelfit_all_fields2$metric
modelfit_all_fields2$control
names(modelfit_all_fields2)
modelfit_all_fields2$resampledCM
modelfit_all_fields2$resample
modelfit_all_fields2
modelfit_all_fields
names(modelfit_all_fields)
summary(modelfit_all_fields)
modelfit_all_fields$residuals
?train
