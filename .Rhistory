knitr::opts_chunk$set(echo = TRUE)
install.packages("sqlutil")
install.packages("sqlutils")
all_claims <- settlementRatioCol(all_claims)
install.packages("earth")
ggplot(allclaims)
library(ggplot2)
ggplot(allclaims)
library(RODBC)
library(png)
library(grid)
library(knitr)
library(htmlTable)
library(rJava)
library(ReporteRs)
library(magrittr)
library(rtable)
library(sqldf)
##Set the working directory of where you copied the Segmentation Analysis folder
setwd("H:/Document/lnavreportauto/SegmentationAnalysis")
##Specify the Original Production Set File (all claims after ER that should be placed in working directory)
all_claims <- read.delim(file = './Hanover Region2 Orig ER All Claims.set',
sep = "~",
header = TRUE)
##Enter the template name and friendly name of the model that you are working on
templateName = "Hanover Region2"
friendlyName = "Hanover Region 2"
myDatabase <- "sa_hanover44_04142017"
templateID <- "11h7b8gjhreg2"
modelVersion <- "2016-02-01 00:00:00.000"
effectiveDate <- ""
##Preliminary exclusions
##After doing the engine run, record the results here
##The total claims including exclusions from SA, outliers, etc.
totalClaims = 360
##Plans ran after preferred picked excluded
plansRanPref = 1
##Entry Errors excluded
entryErrors = 1
##Zero Settlements Excluded
zeroSettlements = 1
## Get all active States in the model (there may be a state assigned with no data yet)
odbcConnection = odbcConnect("sa_hanover44_04142017")
command = paste0("SELECT top 1 template_id FROM OAT00007 WHERE TEMPLATE_NM = '", templateName, "'" )
##print(command)
templateId = sqlQuery(odbcConnection, command, as.is = TRUE)
command = paste0("SELECT max(ctn_effective_dt) FROM OAT00022 WHERE TEMPLATE_ID = '", templateId, "'")
lastModelDt = sqlQuery(odbcConnection, command, as.is = TRUE)
##print (lastModelDate)
command = paste0("SELECT MAX(EFFECTIVE_DT) FROM OAT00006 WHERE TEMPLATE_ID = '", templateId, "'")
regionEffectiveDt = sqlQuery(odbcConnection, command, as.is = TRUE)
command = paste0("select distinct b.UCT_TRANSLATE_TXT as States from oat00006 a join COA_UCT b on a.STATE_CD = b.UCT_TRANSLATE_CD and UCT_TSL_TYPE_CD = 'State' where a.template_id = '",templateId$template_id[1], "' and EFFECTIVE_DT = '",regionEffectiveDt,"'")
states = sqlQuery(odbcConnection, command, as.is = TRUE)
## Get today's date for the document
today = Sys.Date()
today = format(today, format="%B %d %Y")
kable(states, caption = NULL, format.args = list())
#####Preprocess
source('./SupportScripts/preprocess.R')
all_claims <- cleanData(all_claims)
all_claims <- settlementRatioCol(all_claims)
all_claims <- outlierRatioCol(all_claims)
#####Outliers
##Ratio Limits
RLexcluded <- all_claims[all_claims$outlierRatio > 5, ]
numberRemoved <- nrow(RLexcluded)
all_claims <- all_claims[all_claims$outlierRatio <= 5, ]
##Check Model Guidelines
source('./SupportScripts/outlierCheckers.R')
checkguidelines(all_claims)
##2 SDs removed manually
outlier_data <- read.delim(file = './Hanover Region2 Orig ER Minus ODG and Outliers.set',
sep = "~",
header = TRUE)
outlier_data <- cleanData(outlier_data)
outlier_data <- settlementRatioCol(outlier_data)
outlier_data <- outlierRatioCol(outlier_data)
checkguidelines(outlier_data)
list_2sds <- find2SD(outlier_data)
#######Paritions
source('./SupportScripts/ratioHist.R')
doPartition <- 1 # change this to 1 when you are ready to do your partition analysis
if(doPartition){
source('./SupportScripts/partitionTable.R')
all_claims <- injuryTypeCol(all_claims,
myDatabase,
templateID,
effectiveDate)
consistencyHist <- ratioHist(all_claims,
title = "Distribution of Settlement Ratio")
freqTable <- htmlTable(
consistencyHist@hresults,
rnames = FALSE,
align = 'r',
total = TRUE
)
sumTable <- consistencyHist@hsummary
summaryPartition <- summaryTable(all_claims)
SPTable <- htmlTable(summaryPartition,
rnames = FALSE,
col.rgroup = c(rep("lightblue",1), rep("none",1)),
align = paste(rep("|c", nrow(summaryPartition)), "|", collapse = ""),
align.header = paste(rep("|c", ncol(summaryPartition)), "|", collapse = "")
)
injuryPartition <- injuryTypeTable(all_claims)
injuryPartition <- arrange(injuryPartition, -`Number of claims`)
IPTable <- htmlTable(injuryPartition,
rnames = FALSE,
col.rgroup = c(rep("lightblue",1), rep("none",1)),
align = paste(rep("|c", nrow(injuryPartition)), "|", collapse = ""),
align.header = paste(rep("|c", ncol(injuryPartition)), "|", collapse = "")
)
statePartition <- stateTable(all_claims)
statePartition <- arrange(statePartition, -`Number of claims`)
StPTable <- htmlTable(statePartition,
rnames = FALSE,
col.rgroup = c(rep("lightblue",1), rep("none",1)),
align = paste(rep("|c", nrow(statePartition)), "|", collapse = ""),
align.header = paste(rep("|c", ncol(statePartition)), "|", collapse = "")
)
countyPartition <- countyTable(all_claims)
countyPartition <- arrange(countyPartition, -`Number of claims`)
CPTable <- htmlTable(countyPartition,
rnames = FALSE,
col.rgroup = c(rep("lightblue",1), rep("none",1)),
align = paste(rep("|c", nrow(countyPartition)), "|", collapse = ""),
align.header = paste(rep("|c", ncol(countyPartition)), "|", collapse = "")
)
lobPartition <- lobTable(all_claims)
lobPartition <- arrange(lobPartition, -`Number of claims`)
LPTable <- htmlTable(lobPartition,
rnames = FALSE,
col.rgroup = c(rep("lightblue",1), rep("none",1)),
align = paste(rep("|c", nrow(lobPartition)), "|", collapse = ""),
align.header = paste(rep("|c", ncol(lobPartition)), "|", collapse = "")
)
officePartition <- officeTable(all_claims)
officePartition <- arrange(officePartition, -`Number of claims`)
OPTable <- htmlTable(officePartition,
rnames = FALSE,
col.rgroup = c(rep("lightblue",1), rep("none",1)),
align = paste(rep("|c", nrow(officePartition)), "|", collapse = ""),
align.header = paste(rep("|c", ncol(officePartition)), "|", collapse = "")
)
adjusterPartition <- adjusterTable(all_claims)
adjusterPartition <- arrange(adjusterPartition, -`Number of claims`)
APTable <- htmlTable(adjusterPartition,
rnames = FALSE,
col.rgroup = c(rep("lightblue",1), rep("none",1)),
align = paste(rep("|c", nrow(adjusterPartition)), "|", collapse = ""),
align.header = paste(rep("|c", ncol(adjusterPartition)), "|", collapse = "")
)
} else {
SPTable <- "Placeholder"
StPTable <- "Placeholder"
IPTable <- "Placeholder"
CPTable <- "Placeholder"
APTable <- "Placeholder"
OPTable <- "Placeholder"
LPTable <- "Placeholder"
freqTable <- "Placeholder"
consistencyHist <- ratioHist(all_claims,
title = "Distribution of Settlement Ratio")
sumTable <- consistencyHist@hsummary
}
tabl = FlexTable( lobPartition,
header.cell.props = cellProperties( background.color = "#ff0000" ),
header.text.props = textBold( color = "white" ),
add.rownames = FALSE )
tabl = setZebraStyle( tabl, odd = "#FFFFFF", even = "#FFFFFF" )
tabl
kable(injuryPartition)
partitionName = colnames(injuryPartition[1])
injuryParent = sqldf('SELECT  [INJURY TYPE], [NUMBER OF Claims], [Percentage of claims above], [Percentage of claims below], [Average of settlement ratios], [MEDIAN OF SETTLEMENT RATIOS], [AVERAGE OF COMBINED SEVERITY], [Average of settlement ratios] + .10 as [AvgUpperThreshold], [Average of settlement ratios] - .10 as [LowerThreshold], [MEDIAN OF SETTLEMENT RATIOS] + .10 as [MedianUpperThreshold], [MEDIAN OF SETTLEMENT RATIOS] - .10 as [MedianLowerThreshold]
from injuryPartition limit 1')
injuryAnalysis = sqldf('SELECT B.[INJURY TYPE], B.[NUMBER OF Claims], B.[Percentage of claims above], B.[Percentage of claims below], B.[Average of settlement ratios], B.[MEDIAN OF SETTLEMENT RATIOS], B.[AVERAGE OF COMBINED SEVERITY], case when B.[Average of Settlement ratios] > (SELECT [AvgUpperThreshold] from injuryParent limit 1) or B.[Average of Settlement ratios] < (SELECT [AvgUpperThreshold] from injuryParent limit 1) then 0 else 1 end as AvgDiff,  case when B.[Median of Settlement ratios] > (SELECT [MedianUpperThreshold] from injuryParent limit 1) or B.[Median of Settlement ratios] < (SELECT [MedianUpperThreshold] from injuryParent limit 1) then 0 else 1 end as MedianDiff from injuryPartition B')
kable(officePartition)
kable(statePartition)
partitionName = colnames(statePartition[1])
stateParent = sqldf('SELECT  [State], [NUMBER OF Claims], [Percentage of claims above], [Percentage of claims below], [Average of settlement ratios], [MEDIAN OF SETTLEMENT RATIOS], [AVERAGE OF COMBINED SEVERITY], [Average of settlement ratios] + .10 as [AvgUpperThreshold], [Average of settlement ratios] - .10 as [LowerThreshold], [MEDIAN OF SETTLEMENT RATIOS] + .10 as [MedianUpperThreshold], [MEDIAN OF SETTLEMENT RATIOS] - .10 as [MedianLowerThreshold]
from statePartition limit 1')
stateAnalysis = sqldf('SELECT B.[State], B.[NUMBER OF Claims], B.[Percentage of claims above], B.[Percentage of claims below], B.[Average of settlement ratios], B.[MEDIAN OF SETTLEMENT RATIOS], B.[AVERAGE OF COMBINED SEVERITY], case when B.[Average of Settlement ratios] > (SELECT [AvgUpperThreshold] from stateParent limit 1) or B.[Average of Settlement ratios] < (SELECT [AvgUpperThreshold] from injuryParent limit 1) then 0 else 1 end as AvgDiff,  case when B.[Median of Settlement ratios] > (SELECT [MedianUpperThreshold] from injuryParent limit 1) or B.[Median of Settlement ratios] < (SELECT [MedianUpperThreshold] from stateParent limit 1) then 0 else 1 end as MedianDiff, case when B.[NUMBER OF Claims] > 50 then 1 else 0 end as CountThreshold from statePartition B ')
stateSplit = sqldf('Select state from stateAnalysis where AvgDiff = 1 and MedianDiff = 1 and CountThreshold =1' )
if(nrow(stateSplit)==0){
stateText = "At this time ISO CP does not recommend a split by State."
}else{ stateText = "The data suggests that the following states should be split into different models:"
stateSplit}
kable(countyPartition )
help(ggplot)
View(all_claims)
ggplot(all_claims, mapping = aes(all_claims$COA.High))
ggplot(all_claims, mapping = aes(all_claims$COA.High, all_claims$Settled.Amount))
ggplot(all_claims, mapping = aes(all_claims$COA.High, all_claims$Settled.Amount))+geom_dotplot()
ggplot(all_claims, mapping = aes(all_claims$COA.High, all_claims$Settled.Amount))+geom_line()
ggplot(all_claims, mapping = aes(all_claims$COA.High, all_claims$Settled.Amount))+geom_line()+stat_smooth(color = "blue")
install.packages(ISLR)
install.packages("ISLR")
library("splines")
install.packages("splines")
install.packages("splines")
View(all_claims)
fit = lm(Settled.Amount, COA.High)(all_claims, knots= c(50), degree = 1), data = Wage)
require(mgcv);data("iris");
gam.test = gam(Speal.Length ~ s(Petal.Width, k=6, bs = 'ps', m=0), data = iris)
gam.test = gam(Sepal.Length ~ s(Petal.Width, k=6, bs = 'ps', m=0), data = iris)
summary(gam.test);plot(gam.test)
gam.test = gam(COA.High ~ s(Settled.Amount, k=6, bs = 'ps', m=0), data = all_claims)
summary(gam.test);plot(gam.test)
summary(gam.test);plot(gam.test)
library(earth)
earth(x= all_claims$COA.High, y = all_claims$Settled.Amount)
model = earth(all_claims[c(COA.High, Settled.Amount)]), all_claims$COA.High, degree = 6)
model = earth(all_claims[c(COA.High, Settled.Amount)]), all_claims$COA.High, degree = 6)
model = earth(all_claims[c("COA.High", "Settled.Amount")]), all_claims$COA.High, degree = 6)
model = earth(all_claims[c("COA.High", "Settled.Amount")]), degree = 6)
model = earth(all_claims[c("COA.High", "Settled.Amount")]), degree = 2)
model = earth(all_claims[c("COA.High", "Settled.Amount")]), all_claims$COA.High, degree = 2)
model = earth(all_claims[c(COA.High, Settled.Amount)], all_claims$COA.High, degree = 2)
model = earth(all_claims[c("COA.High", "Settled.Amount")], all_claims$COA.High, degree = 2)
plotmo(model)
model[3]
model = earth(all_claims[c("COA.High", "Settled.Amount")], degree = 2)
model = earth(all_claims[c(COA.High")], all_claims$COA.High,  degree = 2)
x = all_claims$COA.High
y = all_claims$Settled.Amount
a = earth(x,y,nprune = 5)
summary(a, digits = 2, sytle = "pmax")
plotmo(a)
plotmo(a)
nodes(a)
model <- earth(y~x, penalty = -1)
summary(model)
earth(formula=y~x, penalty = -1)
install.packages("ployly")
install.packages("plotly")
library(plotly)
plot_ly(mtcars, x= wt, y=mpg, mode = "markers")
data("mtcars")
data(mtcars)
plot_ly(mtcars, x= wt, y=mpg, mode = "markers")
View(mtcars)
plot_ly(mtcars, x= mtcars$wt, y=mtcars$mpg, mode = "markers")
install.packages("fivethirtyeight")
install.packages("devtools")
data(package = "fivethirtyeight")
data[18](package = "fivethirtyeight")
data(package = "fivethirtyeight")
vignette("fivethirtyeight", package = "fivethirtyeight")
browseVignettes(package = "fivethirtyeight")
data(package = "fivethirtyeight")
data(package = "fivethirtyeight")
vignette("college_recent_grads", package = "fivethirtyeight")
data(package = "fivethirtyeight")
data(package = "fivethirtyeight")
vignette("college_recent_grads", package = "fivethirtyeight")
data(package = "fivethirtyeight")
vignette("college_recent_grads", package = "fivethirtyeight")
vignette("bechdel", package = "fivethirtyeight")
vignette("college recent grads", package = "fivethirtyeight")
vignette("college_recent_grads", package = "fivethirtyeight")
vignette("College_recent_grads", package = "fivethirtyeight")
vignette("College_Recent_Grads", package = "fivethirtyeight")
data(package = "fivethirtyeight")
vignette("college_recent_grads", package = "fivethirtyeight")
data(package = "fivethirtyeight")
vignette("college_grad_students", package = "fivethirtyeight")
browseVignettes(package = "fivethirtyeight")
vignette("fivethirtyeight", package = "fivethirtyeight")
data(package = "fivethirtyeight")
library(fivethirtyeight)
data("college_recent_grads")
college_recent_grads <- data("college_recent_grads")
college_recent_grads <- as.data.frame(data("college_recent_grads"))
View(college_recent_grads)
college_recent_grads <- as.data.frame(data(college_recent_grads))
library(fivethirtyeight)
college_recent_grads <- as.data.frame(data(college_recent_grads))
View(college_recent_grads)
data(college_recent_grads)
View(college_recent_grads)
head.matrix(college_recent_grads)
class(college_recent_grads)
df <- as.data.frame(college_recent_grads)
class(college_recent_grads)
df <- as.data.frame(college_recent_grads)
vignette("fivethirtyeight", package = "fivethirtyeight")
devtools::install_github("rudeboybert/fivethirtyeight", build_vignettes = TRUE)
vignette("college_recent_grads", package = "fivethirtyeight")
devtools::install_github("rudeboybert/fivethirtyeight", build_vignettes = TRUE)
browseVignettes(package = "fivethirtyeight")
vignette("fivethirtyeight", package = "fivethirtyeight")
dim(df)
colnames(df)
rownames(df)
nrow(df)
number_of_rows <- nrow(df)
number_of_rows <- as.numeric(nrow(df))
colnames(df)
colNames <- colnames(df)
colNames <- as.array(colnames(df))
number_of_rows
colNames
distinct_major_category <- unique(df$major_category)
distinct_major_category
nrow(distinct_major_category)
dim(distinct_major_category)
distinct_major_category <- as.data.frame(unique(df$major_category))
View(distinct_major_category)
distinct_major_category <- as.data.frame(unique("Major Category", df$major_category))
View(distinct_major_category)
distinct_major_category <- as.data.frame(unique(c("Major Category"), df$major_category))
distinct_major_category <- as.data.frame(unique(c("Major Category"),df$major_category))
View(distinct_major_category)
distinct_major_category <- as.data.frame(unique(c("Major Category" = df$major_category))
distinct_major_category <- as.data.frame(unique("Major Category" = df$major_category))
distinct_major_category <- as.data.frame(unique("Major Category" = df$major_category))
distinct_major_category <- as.data.frame(("Major Category" = unique(df$major_category))
install.packages("kableExtra")
install.packages("ggplot2")
install.packages("maps")
install.packages("sqldf")
library(sqldf)
library(magrittr)
library(kableExtra)
setwd("C/Users/i64756/Desktop/Applied Stats")
setwd("C:/Users/i64756/Desktop/Applied Stats")
train <- read.csv("train.csv")
View(train)
sapply(combined_age, function(x) sum(is.na(x)))
sapply(train, function(x) sum(is.na(x)))
median(train$LotFrontage)
median(train$LotFrontage, na.rm = TRUE)
train$LotFrontage[is.na(train$LotFrontage)] <-69;
sapply(train, function(x) sum(is.na(x)))
test$LotFrontage[is.na(train$LotFrontage)] <- 69
train <- read.csv("train.csv")
test <- read.csv("test.csv")
train$LotFrontage[is.na(train$LotFrontage)] <-69
test$LotFrontage[is.na(train$LotFrontage)] <- 69
train$LotFrontage[is.na(train$LotFrontage)] <-69
test$LotFrontage[is.na(test$LotFrontage)] <- 69
sapply(train, function(x) sum(is.na(x)))
library(sqldf)
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- train$YearBuilt
class(train$YearBuilt)
train$GarageYrBlt[is.na(train$GarageYrBlt)] <-  as.integer(train$YearBuilt)
sapply(train, function(x) sum(is.na(x)))
train$GarageYrBlt[is.na(train$GarageYrBlt)] <-  as.integer(train$YearBuilt)
test$GarageYrBlt[is.na(test$GarageYrBlt)] <-  as.integer(test$YearBuilt)
test$GarageYrBlt[is.na(test$GarageYrBlt)] <-  as.integer(test$YearBuilt)
sapply(train, function(x) sum(is.na(x)))
library(glmnet)
library(caret)
xtrain <- train
xtrain <- train
ytrain <- train$SalePrice
xtrain$SalePrice <- NULL
xtest <- test
ytrain <- as.data.frame(train$SalePrice)
View(ytrain)
xtrain <- train
ytrain <- as.data.frame(train$SalePrice)
names(ytrain) <- c("SalePrice")
x = model.matrix(ytrain$SalePrice ~., xtrain)[,-1]
y = ytrain$Sal
x = model.matrix(ytrain$SalePrice ~., xtrain)[,-1]
y = ytrain$SalePrice
cv.out <- cv.glmnet(x,y,alpha = 1)
